##
## This file is part of the libopencm3 project.
##
## Copyright (C) 2009 Uwe Hermann <uwe@hermann-uwe.de>
## Copyright (C) 2010 Piotr Esden-Tempski <piotr@esden.net>
## Copyright (C) 2013 Frantisek Burian <BuFran@seznam.cz>
## Copyright (C) 2016 Cezary Sa≈Çbut <cezary@salbut.net>
##
## This library is free software: you can redistribute it and/or modify
## it under the terms of the GNU Lesser General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This library is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU Lesser General Public License for more details.
##
## You should have received a copy of the GNU Lesser General Public License
## along with this library.  If not, see <http://www.gnu.org/licenses/>.
##

# Be silent per default, but 'make V=1' will show all compiler calls.
ifneq ($(V),1)
Q		:= @
NULL		:= 2>/dev/null
endif

###############################################################################
# Executables

PREFIX		?= arm-none-eabi

CC		:= $(PREFIX)-gcc
CXX		:= $(PREFIX)-g++
LD		:= $(PREFIX)-gcc
AR		:= $(PREFIX)-ar
AS		:= $(PREFIX)-as
OBJCOPY		:= $(PREFIX)-objcopy
OBJDUMP		:= $(PREFIX)-objdump
SIZE		:= $(PREFIX)-size
GDB		:= $(PREFIX)-gdb
STFLASH		= $(shell which st-flash)
STYLECHECK	:= /checkpatch.pl
STYLECHECKFLAGS	:= --no-tree -f --terse --mailback
STYLECHECKFILES	:= $(shell find . -name '*.[ch]')

###############################################################################
# Directories

SRC_DIR := ./src
OBJ_DIR := ./obj
BIN_DIR := ./bin
LST_DIR := ./lst
LD_DIR  := ./ld

BUILD_SUBDIRS := $(OBJ_DIR) $(BIN_DIR) $(LST_DIR)

###############################################################################
# Source files

C_SRCS += src/main.c
C_SRCS += src/led.c
C_SRCS += src/timers.c

CPP_SRCS =

SRC_DIRS := $(shell find $(SRC_DIR) -type d)

# Here the compiler looks for the source files.
VPATH := $(SRC_DIRS)

###############################################################################
# Object files

C_OBJS := $(subst .c,.o, \
	$(foreach file, $(C_SRCS), \
	$(subst $(dir $(file)), $(OBJ_DIR)/, $(file))))

CPP_OBJS := $(subst .cpp,.o, \
	$(foreach file, $(CPP_SRCS), \
	$(subst $(dir $(file)), $(OBJ_DIR)/, $(file))))

OBJS := $(C_OBJS) $(CPP_OBJS)

###############################################################################

# Memory map of resultant program
MAP_FILE	= $(LST_DIR)/$(BINARY).map

# List of all dependency files.
DEPS := $(subst .o,.d, $(OBJS))

ifeq ($(strip $(OPENCM3_DIR)),)
# user has not specified the library path, so we try to detect it

# where we search for the library
LIBPATHS := ./libopencm3 ../../../../libopencm3 ../../../../../libopencm3

OPENCM3_DIR := $(wildcard $(LIBPATHS:=/locm3.sublime-project))
OPENCM3_DIR := $(firstword $(dir $(OPENCM3_DIR)))

ifeq ($(strip $(OPENCM3_DIR)),)
$(warning Cannot find libopencm3 library in the standard search paths.)
$(error Please specify it through OPENCM3_DIR variable!)
endif
endif

ifeq ($(V),1)
$(info Using $(OPENCM3_DIR) path to library)
endif

INCLUDE_DIR	= $(OPENCM3_DIR)/include
LIB_DIR		= $(OPENCM3_DIR)/lib
SCRIPT_DIR	= $(OPENCM3_DIR)/scripts

###############################################################################
# C flags

CFLAGS		+= -std=c99
CFLAGS		+= -O3 -g
CFLAGS		+= -Wextra -Wshadow -Wimplicit-function-declaration
CFLAGS		+= -Wredundant-decls -Wmissing-prototypes -Wstrict-prototypes
CFLAGS		+= -fno-common -ffunction-sections -fdata-sections
CFLAGS		+= -Iinclude -Ilibopencm3/include
CFLAGS		+= --specs=nano.specs

# Dump defines, stop after preprocessing.
# CFLAGS		+= -dM -E

###############################################################################
# C++ flags

CXXFLAGS	+= -Os -g
CXXFLAGS	+= -Wextra -Wshadow -Wredundant-decls  -Weffc++
CXXFLAGS	+= -fno-common -ffunction-sections -fdata-sections

###############################################################################
# C & C++ preprocessor common flags

CPPFLAGS	+= -MD
CPPFLAGS	+= -Wall -Wundef
CPPFLAGS	+= -I$(INCLUDE_DIR) $(DEFS)

###############################################################################
# Linker flags

LDFLAGS		+= --static -nostartfiles
LDFLAGS		+= -L$(LIB_DIR)
LDFLAGS		+= -T$(LDSCRIPT)
LDFLAGS		+= -Wl,-Map=$(MAP_FILE)
LDFLAGS		+= -Wl,--gc-sections
LDFLAGS		+= --specs=nano.specs

ifeq ($(V),99)
LDFLAGS		+= -Wl,--print-gc-sections
endif

###############################################################################
# Used libraries

LDLIBS		+= -l$(LIBNAME)
LDLIBS		+= -Wl,--start-group -lc -lgcc -lnosys -Wl,--end-group

###############################################################################
###############################################################################
###############################################################################

.SUFFIXES: .elf .bin .hex .srec .list .map
.SECONDEXPANSION:
.SECONDARY:

all: target_elf target_bin target_list

print_size: $(BIN_DIR)/$(BINARY).elf
target_elf: $(BIN_DIR)/$(BINARY).elf
target_bin: $(BIN_DIR)/$(BINARY).bin
target_hex: $(BIN_DIR)/$(BINARY).hex
target_srec: $(BIN_DIR)/$(BINARY).srec
target_list: $(LST_DIR)/$(BINARY).list

flash: $(BIN_DIR)/$(BINARY).flash

$(LDSCRIPT):
    ifeq (,$(wildcard $(LDSCRIPT)))
        $(error Unable to find specified linker script: $(LDSCRIPT))
    endif

$(BIN_DIR)/%.bin: $(BIN_DIR)/%.elf | $(BIN_DIR)
	@printf "  OBJCOPY $@\n"
	$(Q)$(OBJCOPY) -Obinary $< $@

$(BIN_DIR)/%.hex: $(BIN_DIR)/%.elf | $(BIN_DIR)
	@printf "  OBJCOPY $(*).hex\n"
	$(Q)$(OBJCOPY) -Oihex $< $@

$(BIN_DIR)/%.srec: $(BIN_DIR)/%.elf | $(BIN_DIR)
	@printf "  OBJCOPY $(*).srec\n"
	$(Q)$(OBJCOPY) -Osrec $< $@

$(LST_DIR)/%.list: $(BIN_DIR)/%.elf | $(BUILD_SUBDIRS)
	@printf "  OBJDUMP $@\n"
	$(Q)$(OBJDUMP) -dh $< > $@

$(BIN_DIR)/%.elf: $(OBJS) $(LDSCRIPT) | $(BIN_DIR)
	@printf "  LD      $@\n"
	$(Q)$(LD) $(LDFLAGS) $(ARCH_FLAGS) $(OBJS) $(LDLIBS) -o $@
	@printf "  SIZE    $@\n"
	$(Q)$(SIZE) $(BIN_DIR)/$(BINARY).elf

$(OBJ_DIR)/%.o: %.c | $(BUILD_SUBDIRS)
	@printf "  CC      $(*).c\n"
	$(Q)$(CC) $(CFLAGS) $(CPPFLAGS) $(ARCH_FLAGS) -o $@ -c $<

$(OBJ_DIR)/%.o: %.cxx | $(BUILD_SUBDIRS)
	@printf "  CXX     $(*).cxx\n"
	$(Q)$(CXX) $(CXXFLAGS) $(CPPFLAGS) $(ARCH_FLAGS) -o $@ -c $<

$(OBJ_DIR)/%.o: %.cpp | $(BUILD_SUBDIRS)
	@printf "  CXX     $(*).cpp\n"
	$(Q)$(CXX) $(CXXFLAGS) $(CPPFLAGS) $(ARCH_FLAGS) -o $@ -c $<

clean:
	@printf "  CLEAN\n"
	$(Q) rm -rf $(BUILD_SUBDIRS)

stylecheck: $(STYLECHECKFILES:=.stylecheck)
styleclean: $(STYLECHECKFILES:=.styleclean)

# the cat is due to multithreaded nature - we like to have consistent chunks of text on the output
%.stylecheck: %
	$(Q)$(SCRIPT_DIR)$(STYLECHECK) $(STYLECHECKFLAGS) $* > $*.stylecheck; \
		if [ -s $*.stylecheck ]; then \
			cat $*.stylecheck; \
		else \
			rm -f $*.stylecheck; \
		fi;

%.styleclean:
	$(Q)rm -f $*.stylecheck;

print_size: $(BIN_DIR)/$(BINARY).elf
	@printf "  SIZE    $<\n"
	$(Q)$(SIZE) $(BIN_DIR)/$(BINARY).elf

print_size_functions: $(LST_DIR)/$(BINARY).map
	@egrep -A1 "^ \.text\." $(LST_DIR)/$(BINARY).map | grep -v "^--" | awk '/\.text\./{printf $$0; next}{print " " $$0}' | sed -e "s/\.text\.//" | awk -n '{printf "%s %d %s\n", $$1, $$3, $$3}' | column -t | sort -gr -k2

print_sources:
	@echo C_SRCS = $(C_SRCS)
	@echo CPP_SRCS = $(CPP_SRCS)

print_objects:
	@echo OBJS = $(OBJS)

print_dependencies:
	@echo DEPS = $(DEPS)

print_vars:
	@echo LDSCRIPT = $(LDSCRIPT)
	@echo BUILD_SUBDIRS = $(BUILD_SUBDIRS)
	@echo VPATH = $(VPATH)

%.stlink-flash: %.bin
	@printf "  FLASH  $<\n"
	$(Q)$(STFLASH) write $(*).bin 0x8000000

upload: $(BIN_DIR)/$(BINARY).elf
	@printf "  UPLOAD  $<\n"
	$(Q)$(OOCD) -f $(OOCD_CONFIG) \
		    -c "init; reset halt" \
		    -c "load_image $<" \
		    -c "reset run" \
		    -c "shutdown" $(NULL)

ifeq ($(STLINK_PORT),)
ifeq ($(BMP_PORT),)
ifeq ($(OOCD_SERIAL),)
%.flash: %.hex
	@printf "  FLASH   $<\n"
	@# IMPORTANT: Do not use "resume", only "reset" will work correctly!
	$(Q)$(OOCD) -f $(OOCD_CONFIG) \
		    -c "init" -c "reset init" \
		    -c "flash write_image erase $(*).hex" \
		    -c "reset" \
		    -c "shutdown" $(NULL)
else
%.flash: %.hex
	@printf "  FLASH   $<\n"
	@# IMPORTANT: Don not use "resume", only "reset" will work correctly!
	$(Q)$(OOCD) -f $(OOCD_CONFIG) \
		    -c "ft2232_serial $(OOCD_SERIAL)" \
		    -c "init" -c "reset init" \
		    -c "flash write_image erase $(*).hex" \
		    -c "reset" \
		    -c "shutdown" $(NULL)
endif
else
%.flash: %.elf
	@printf "  GDB   $(*).elf (flash)\n"
	$(Q)$(GDB) --batch \
		   -ex 'target extended-remote $(BMP_PORT)' \
		   -x $(SCRIPT_DIR)/black_magic_probe_flash.scr \
		   $(*).elf
endif
else
%.flash: %.elf
	@printf "  GDB   $(*).elf (flash)\n"
	$(Q)$(GDB) --batch \
		   -ex 'target extended-remote $(STLINK_PORT)' \
		   -x $(SCRIPT_DIR)/stlink_flash.scr \
		   $(*).elf
endif

$(BUILD_SUBDIRS):
	$(Q)mkdir -p $(BUILD_SUBDIRS)

.PHONY: all clean stylecheck styleclean create_subdirs \
	target_elf target_bin target_hex target_srec target_list


-include $(DEPS)
